name: CI Pipeline

"on":
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_voice_agents
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage flake8 black
    
    - name: Run Python linting with flake8
      working-directory: ./backend
      run: |
        flake8 src/ tests/ --max-line-length=88 --ignore=E203,W503
    
    - name: Check Python formatting with black
      working-directory: ./backend
      run: |
        black --check src/ tests/
    
    - name: Run backend tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_voice_agents
        JWT_SECRET: test_secret_key_for_ci
        ENVIRONMENT: testing
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=html --cov-report=term --cov-fail-under=80
    
    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: backend/htmlcov/

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Check TypeScript types
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test
    
    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python for security scanning
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Python security scan with bandit
      working-directory: ./backend
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Check Python dependencies for security issues
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Set up Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Run npm security audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test backend Docker build
      run: |
        cd backend
        docker build -f Dockerfile.dev -t voice-agents-backend:test .
    
    - name: Test frontend Docker build  
      run: |
        cd frontend
        docker build -f Dockerfile.dev -t voice-agents-frontend:test .
    
    - name: Test docker-compose build
      run: |
        docker-compose -f docker-compose.yml build --no-cache